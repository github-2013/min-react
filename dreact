function createElement(type, props = {}, ...children) {
  return {
    type,
    props: {
      ...props,
      children: children.map((child) =>
        typeof child === 'object' ? child : createTextElement(child)
      )
    }
  }
}

function createTextElement(text) {
  return {
    type: 'TEXT_ELEMENT',
    props: {
      nodeValue: text,
      children: [],
    }
  };
}


// const vdom = createElement('div', { id: 1 }, createElement('span', null, '小满zs'));
// console.log(vdom)

let nextUnitOfWork = null; // 下一个工作单元
let currentRoot = null; // 旧的 Fiber 树
let wipRoot = null; //  当前正在工作的 Fiber 树
let deletions = null; // 存储需要删除的 Fiber

// Fiber 渲染入口
function render(element, container) {
  // wipRoot 表示“正在进行的工作根”，它是 Fiber 架构中渲染任务的起点
  wipRoot = {
    dom: container, // 渲染目标的 DOM 容器
    props: {
      children: [element], // 要渲染的元素（例如 React 元素）
    },
    alternate: currentRoot,
    // alternate 是 React Fiber 树中的一个关键概念，用于双缓冲机制（双缓冲 Fiber Tree）。currentRoot 是之前已经渲染过的 Fiber 树的根，wipRoot 是新一轮更新的根 Fiber 节点。
    // 它们通过 alternate 属性相互关联
    // 旧的fiber树
  };
  nextUnitOfWork = wipRoot;
  // nextUnitOfWork 是下一个要执行的工作单元（即 Fiber 节点）。在这里，将其设置为 wipRoot，表示渲染工作从根节点开始
  deletions = [];
  // 专门用于存放在更新过程中需要删除的节点。在 Fiber 更新机制中，如果某些节点不再需要，就会将它们放入 deletions，
  // 最后在 commitRoot 阶段将它们从 DOM 中删除

  // requestIdleCallback 浏览器绘制一帧16ms 空闲的时间去执行的函数 浏览器自动执行 
  // 浏览器一帧做些什么
  // 1.处理时间的回调click...事件
  // 2.处理计时器的回调
  // 3.开始帧
  // 4.执行requestAnimationFrame 动画的回调
  // 5.计算机页面布局计算 合并到主线程
  // 6.绘制
  // 7.如果此时还有空闲时间，执行requestIdleCallback
  requestIdleCallback(workLoop);
}

// 创建 Fiber 节点
function createFiber(element, parent) {
  return {
    type: element.type,
    props: element.props,
    parent,
    dom: null, // 关联的 DOM 节点
    child: null, // 子节点
    sibling: null, // 兄弟节点
    alternate: null, // 对应的前一次 Fiber 节点
    effectTag: null, // 'PLACEMENT', 'UPDATE', 'DELETION'
  };
}

// 创建 DOM 节点
function createDom(fiber) {
  const dom = fiber.type === 'TEXT_ELEMENT' ? document.createTextNode('') : document.createElement(fiber.type);
  updateDom(dom, {}, fiber.props);
  return dom;
}

// 事件属性
const isEvent = key => key.startsWith("on")
// 去除 事件属性 和 特殊属性 children 外的属性
const isProperty = key =>
  key !== "children" && !isEvent(key)
// 是否为新增属性
const isNew = (prev, next) => key =>
  prev[key] !== next[key]
// 是否要移除属性
const isGone = (prev, next) => key => !(key in next)

// 更新 DOM 节点属性
function updateDom(dom, prevProps, nextProps) {
  // 移除旧事件
  Object.keys(prevProps)
    .filter(isEvent)
    .filter(
      key =>
        !(key in nextProps) ||
        isNew(prevProps, nextProps)(key)
    )
    .forEach(name => {
      const eventType = name
        .toLowerCase()
        .substring(2)
      dom.removeEventListener(
        eventType,
        prevProps[name]
      )
    })

  // 移除旧属性
  Object.keys(prevProps)
    .filter(name => name !== 'children')
    .filter(isGone(prevProps, nextProps))
    .forEach(name => {
      dom[name] = '';
    });

  // 添加新属性
  Object.keys(nextProps)
    .filter(name => name !== 'children')
    .filter(name => prevProps[name] !== nextProps[name])
    .forEach(name => {
      dom[name] = nextProps[name];
    });

  // 添加新事件
  Object.keys(nextProps)
    .filter(isEvent)
    .filter(isNew(prevProps, nextProps))
    .forEach(name => {
      const eventType = name
        .toLowerCase()
        .substring(2);
      dom.addEventListener(
        eventType,
        nextProps[name]
      );
    });
}

// Fiber 调度器
// 实现将耗时任务拆分成多个小的工作单元
function workLoop(deadline) {
  // deadline 表示浏览器空闲时间
  let shouldYield = false;
  // 是一个标志，用来指示是否需要让出控制权给浏览器。如果时间快用完了，则设为 true，以便及时暂停任务，避免阻塞主线程

  while (nextUnitOfWork && !shouldYield) {
    // performUnitOfWork 是一个函数，它处理当前的工作单元，并返回下一个要执行的工作单元。每次循环会更新 nextUnitOfWork 为下一个工作单元
    nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
    // 使用 deadline.timeRemaining() 来检查剩余的空闲时间。如果时间少于 1 毫秒，就设置 shouldYield 为 true，表示没有空闲时间了，就让出控制权
    shouldYield = deadline.timeRemaining() < 1;
  }

  if (!nextUnitOfWork && wipRoot) {
    // 当没有下一个工作单元时（nextUnitOfWork 为 null），并且有一个待提交的“工作根”（wipRoot），就会调用 commitRoot() 将最终的结果应用到 DOM 中
    commitRoot();
  }

  // 工作单元未执行完继续交给浏览器
  if (nextUnitOfWork) {
    // 使用 requestIdleCallback 来安排下一个空闲时间段继续执行 workLoop，让任务在浏览器空闲时继续进行
    requestIdleCallback(workLoop);
  }
}

// 执行一个工作单元
function performUnitOfWork(fiber) {
  // 如果没有 DOM 节点，为当前 Fiber 创建 DOM 节点
  // if (!fiber.dom) {
  //   fiber.dom = createDom(fiber);
  //   // console.log(fiber.dom)
  // }

  // 是否是组件
  const isFunctionComponent = fiber.type instanceof Function;
  if (isFunctionComponent) {
    // 组件
    updateFunctionComponent(fiber)
  } else {
    updateHostComponent(fiber)
  }
  // 确保每个 Fiber 节点都在内存中有一个对应的 DOM 节点准备好，以便后续在提交阶段更新到实际的 DOM 树中

  // 创建子节点的 Fiber
  // const vdom = React.createElement('div', { id: 1 }, React.createElement('span', null, '小满zs'));
  // 子节点在children中
  // const elements = fiber.props.children;
  // reconcileChildren(fiber, elements);

  // 返回下一个工作单元（child, sibling, or parent）
  //console.log(fiber.child)
  if (fiber.child) {
    return fiber.child;
  }

  // 递归调用，处理兄弟节点
  let nextFiber = fiber;
  // console.log(nextFiber)
  while (nextFiber) {
    if (nextFiber.sibling) {
      return nextFiber.sibling;
    }

    nextFiber = nextFiber.parent;
  }

  return null;
}

// 更新宿主组件
function updateHostComponent(fiber) {
  if (!fiber.dom) {
    fiber.dom = createDom(fiber)
  }

  // 子节点对比
  reconcileChildren(fiber, fiber.props.children)
}

let wipFiber = null; // 本次操作的节点
let hookIndex = null; // state的索引
// 更新函数组件
function updateFunctionComponent(fiber) {
  wipFiber = fiber
  hookIndex = 0; // hook的索引位置
  wipFiber.hooks = []; // 初始化 hooks 数组

  // 运行函数 获取 子节点，并执行函数中的useState
  const children = [fiber.type(fiber.props)]
  // 子节点对比
  reconcileChildren(fiber, children);
}

// Diff 算法: 将子节点与之前的 Fiber 树进行比较
function reconcileChildren(wipFiber, elements) {
  let index = 0;//
  // 上一次提交的DOM
  let oldFiber = wipFiber.alternate && wipFiber.alternate.child; // 旧的 Fiber 树
  // 保存兄弟节点
  let prevSibling = null;

  // 为每一个孩子节点创建 Fiber 节点
  // oldFiber != null 当新子节点变少  旧节点还有 持续循环 为节点打上删除标签
  while (index < elements.length || oldFiber != null) {
    const element = elements[index];
    let newFiber = null;

    // 比较旧 Fiber 和新元素，判断类型是否相同
    const sameType = oldFiber && element && element.type === oldFiber.type

    //如果是同类型的节点，复用原来的节点，打上修改标签
    if (sameType) {
      console.log(element, 'update')
      newFiber = {
        type: oldFiber.type,
        props: element.props,
        dom: oldFiber.dom,
        parent: wipFiber,
        alternate: oldFiber,
        effectTag: 'UPDATE',
      };
    }

    // 如果新节点存在，但类型不同，新增fiber节点
    if (element && !sameType) {
      console.log(element, 'add')
      // newFiber = createFiber(element, wipFiber);
      newFiber = {
        type: element.type,
        props: element.props,
        dom: null,
        parent: wipFiber,
        alternate: null,
        effectTag: 'PLACEMENT'
      };
    }

    // 类型不同，如果旧节点存在，但新节点不存在，删除旧节点
    if (oldFiber && !sameType) {
      console.log(oldFiber, 'delete')
      oldFiber.effectTag = 'DELETION';
      // 收集要删除的节点
      deletions.push(oldFiber);
    }

    // 移动旧fiber指针到下一个兄弟节点
    if (oldFiber) {
      oldFiber = oldFiber.sibling;
    }

    // 将新fiber节点插入到DOM树中
    if (index === 0) {
      // 将第一个子节点设置为父节点的子节点
      wipFiber.child = newFiber;
    } else if (element) {
      //将后续子节点作为前一个兄弟节点的兄弟
      prevSibling.sibling = newFiber;
    }

    // 更新兄弟节点
    prevSibling = newFiber;
    index++;
  }
}

function useState(initial) {
  // 通过执行顺序获取对应索引的值
  const oldHook = wipFiber.alternate && wipFiber.alternate.hooks && wipFiber.alternate.hooks[hookIndex]
  // 之前有值 获取 之前保存的值， 没值则使用默认值
  const hook = {
    state: oldHook ? oldHook.state : initial,
    queue: []
  }
  // 获取上一次的修改操作
  const actions = oldHook ? oldHook.queue : [];
  actions.forEach(action => {
    if (action instanceof Function) {
      hook.state = action(hook.state)
    } else {
      hook.state = action
    }
  })

  // 修改状态
  const setState = action => {
    // 保存操作
    hook.queue.push(action)
    // 修改后更新下一个工作单元
    wipRoot = {
      dom: currentRoot.dom,
      props: currentRoot.props,
      alternate: currentRoot,
    }
    nextUnitOfWork = wipRoot; // 设置下一个工作单元为 wipRoot
    deletions = []; // 清空删除队列
    // 重新开始工作循环
    requestIdleCallback(workLoop);
  }

  // 保存数据进入队列
  wipFiber.hooks.push(hook)
  // 索引增加 函数是从上到下执行的, 这就是在react useState 不能在判断中添加的原因
  hookIndex++
  // 返回当前的状态值
  return [hook.state, setState]
}

// 提交更新到 DOM
function commitRoot() {
  deletions.forEach(commitWork); // 删除需要删除的 Fiber 节点
  commitWork(wipRoot.child);
  currentRoot = wipRoot; // 保存提交的树
  wipRoot = null;
}

// 提交单个 Fiber 节点
function commitWork(fiber) {
  if (!fiber) {
    return;
  }

  let domParentFiber = fiber.parent;
  // 判断父级是否有真实dom，没有则继续向上找
  while(!domParentFiber.dom) {
    domParentFiber = domParentFiber.parent
  }

  // 获取 最近 上级的 真实dom
  let domParent = domParentFiber.dom;

  if (fiber.effectTag === 'PLACEMENT' && fiber.dom != null) {
    // 新增操作
    domParent.appendChild(fiber.dom);
  } else if (fiber.effectTag === 'UPDATE' && fiber.dom != null) {
    // 更新操作
    updateDom(fiber.dom, fiber.alternate.props, fiber.props);
  } else if (fiber.effectTag === 'DELETION') {
    // 删除操作
    commitDeletion(fiber, domParent)
  }

  commitWork(fiber.child);
  commitWork(fiber.sibling);
}

function commitDeletion(fiber, domParent) {
  if (fiber.dom) {
    domParent.removeChild(fiber.dom)
  } else {
    commitDeletion(fiber.child, domParent)
  }
}
// render(createElement('div', { id: 'root' }, createElement('span', null, '小满zs')), document.getElementById('root'));
// 
// setTimeout(() => {
//     render(createElement('div', { id: 'root' }, createElement('p', null, '新元素')), document.getElementById('root'));
// }, 2000)
